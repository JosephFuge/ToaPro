@*
Assign TAs / TAs View Assignments View (Groups 7 & 5)
This view will need to contain functionality to disallow TAs from editing their assignments
and allowing professors to edit/make assignments.
*@

@model Dictionary<string, List<List<string>>>

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<vc:submenu-types view="Default"></vc:submenu-types>
<vc:header-types title="Assign TAs" />

@{
    var allGroupsJson = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllGroups);
    var allRequirementsJson = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllRequirements);
    var modelJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}

<div class="container">
    <div>
        <vc:header-types />
    </div>

    <main class="container mt-4">
        <div class="table-container">
            <table class="table" id="taAssignmentsTable">
                <thead class="thead-dark">
                    <tr>
                        <th>TA Name</th>
                        <th>Groups</th>
                        <th>Requirements</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </main>
</div>

@section Scripts {
    <script>
        var allGroups = @Html.Raw(allGroupsJson);
        var allRequirements = @Html.Raw(allRequirementsJson);
        var modelData = @Html.Raw(modelJson);
    </script>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            // Populate the table dynamically
            populateTable();

            function populateTable() {
                var tbody = $("#taAssignmentsTable tbody");
                tbody.empty(); // Clear existing rows

                Object.keys(modelData).forEach(function (taKey) {
                    var taData = modelData[taKey];
                    var taName = taData[0][0] || "";
                    var groups = taData[1] || [];
                    var requirements = taData[2] || [];

                    var row = $('<tr>');
                    row.append($('<td>').text(taName));
                    row.append($('<td class="groups-cell">').text(groups.join(", ")));
                    row.append($('<td class="requirements-cell">').html(requirements.join("<br>")));
                    var editButton = $('<button>').attr({
                        'class': 'button edit-button',
                        'data-id': taKey
                    }).text('Edit');
                    row.append($('<td>').append(editButton));

                    tbody.append(row);
                });

                attachEventHandlers();
            }

            function attachEventHandlers() {
                $(document).on('click', '.edit-button', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    var taKey = $(this).data('id');
                    var row = $(this).closest('tr');
                    var groupsCell = row.find('.groups-cell');
                    var requirementsCell = row.find('.requirements-cell');

                    // Replace the cells with dropdown menus
                    var groupsDropdown = $('<select multiple class="form-control groups-dropdown">');
                    allGroups.forEach(function (group) {
                        var option = $('<option>').val(group).text(group);
                        if (modelData[taKey][1].includes(group)) {
                            option.prop('selected', true);
                        }
                        groupsDropdown.append(option);
                    });
                    groupsCell.html(groupsDropdown);

                    var requirementsDropdown = $('<select multiple class="form-control requirements-dropdown">');
                    allRequirements.forEach(function (requirement) {
                        var option = $('<option>').val(requirement).text(requirement);
                        if (modelData[taKey][2].includes(requirement)) {
                            option.prop('selected', true);
                        }
                        requirementsDropdown.append(option);
                    });
                    requirementsCell.html(requirementsDropdown);

                    // Change the button to "Submit"
                    $(this).text('Submit').removeClass('edit-button').addClass('submit-button');
                });

                $(document).on('click', '.submit-button', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    var taKey = $(this).data('id');
                    var row = $(this).closest('tr');
                    var groupsDropdown = row.find('.groups-dropdown');
                    var requirementsDropdown = row.find('.requirements-dropdown');

                    var selectedGroups = groupsDropdown.val() || [];
                    var selectedRequirements = requirementsDropdown.val() || [];

                    var dataToSend = JSON.stringify({
                        taKey: taKey,
                        groups: selectedGroups,
                        requirements: selectedRequirements
                    });
                    console.log(dataToSend); // Debugging line to see what's being sent

                    // Send the updated assignments to the server
                    $.ajax({
                        url: '/Rubric/UpdateAssignments',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            taKey: taKey,
                            groups: selectedGroups,
                            requirements: selectedRequirements
                        }),
                        beforeSend: function () {
                            row.find('.submit-button').text('Submitting...').prop('disabled', true);
                        },
                        success: function (response) {
                            if (response.success) {
                                row.find('.submit-button').text('Completed').css('color', 'green');
                            } else {
                                row.find('.submit-button').text('Error').css('color', 'red');
                                console.log(response.error);
                            }
                        },
                        error: function () {
                            row.find('.submit-button').text('Error').css('color', 'red');
                        },
                        complete: function () {
                            setTimeout(function () {
                                location.reload();
                            }, 3000); // Reload the page after 3 seconds
                        }
                    });
                });
            }
        });
    </script>
}